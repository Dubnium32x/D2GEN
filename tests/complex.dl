// filepath: /home/dylan/Documents/D2GEN/tests/complex.dl

// Nested struct and enum usage
enum Color { Red = 1, Green = 2, Blue = 3 };

struct Vec2 {
    int x;
    int y;
};

struct Pixel {
    Vec2 pos;
    Color color;
};

void printPixel(Pixel p) {
    writeln(p.pos.x);
    writeln(p.pos.y);
    writeln(p.color);
}

int sumColors(Pixel[] pixels, int n) {
    int sum = 0;
    for (int i = 0; i < n; i = i + 1) {
        sum = sum + pixels[i].color;
    }
    return sum;
}

void main() {
    // Array of structs
    Pixel pixels[3];
    pixels[0].pos.x = 1;
    pixels[0].pos.y = 2;
    pixels[0].color = Color.Red;
    pixels[1].pos.x = 3;
    pixels[1].pos.y = 4;
    pixels[1].color = Color.Green;
    pixels[2].pos.x = 5;
    pixels[2].pos.y = 6;
    pixels[2].color = Color.Blue;

    // Array of function pointers
    void function(Pixel) fpArr[2];
    fpArr[0] = &printPixel;
    fpArr[1] = &printPixel;
    fpArr[0](pixels[0]);
    fpArr[1](pixels[2]);

    // Nested loop and switch
    int total = 0;
    for (int i = 0; i < 3; i = i + 1) {
        switch (pixels[i].color) {
            case Color.Red:
                total = total + 10;
                break;
            case Color.Green:
                total = total + 20;
                break;
            case Color.Blue:
                total = total + 30;
                break;
            default:
                total = total + 1;
        }
    }
    writeln(total);

    // Call function with array
    int colorSum = sumColors(pixels, 3);
    writeln(colorSum);

    // String and built-in
    string s;
    if (s.empty()) {
        writeln(123);
    } else {
        writeln(456);
    }
}

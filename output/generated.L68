00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 5/10/2025 8:10:15 PM

00000000                             1  ** GENERATED CODE USING DLANG AND D2GEN COMPILER **
00001000                             2          ORG $1000
00001000  4EB9 0000100C              3          jsr __global_init
00001006  4EF9 0000100E              4          jmp main
0000100C                             5  
0000100C                             6  ; ===== FUNCTION DEFINITIONS =====
0000100C                             7  __global_init:
0000100C  4E75                       8          rts
0000100E                             9  main:
0000100E                            10          ; Function prologue
0000100E  4E56 0000                 11          link A6, #0  ; Setup stack frame (saves A6 and sets up new frame in one instruction)
00001012  43F9 00001169             12          lea strAA, A1  ; Load effective address
00001018  2F09                      13          move.l A1, -(SP)
0000101A  6100 018E                 14          bsr print
0000101E  588F                      15          add.l #4, SP
00001020                            16          ; Mixin template expansion: MathOps
00001020                            17          ; Inlined function from template: square
00001020  6000 0016                 18          bra __end_square_1
00001024                            19  __square_0:
00001024  2239 0000119A             20          move.l x, D1
0000102A  2439 0000119A             21          move.l x, D2
00001030  2001                      22          move.l D1, D0
00001032  C1C2                      23          muls D2, D0
00001034  4E75                      24          rts
00001036  4E75                      25          rts
00001038                            26  __end_square_1:
00001038                            27          ; Inlined function from template: cube
00001038  6000 001E                 28          bra __end_cube_3
0000103C                            29  __cube_2:
0000103C  2239 0000119A             30          move.l x, D1
00001042  2439 0000119A             31          move.l x, D2
00001048  2001                      32          move.l D1, D0
0000104A  C1C2                      33          muls D2, D0
0000104C  2239 0000119A             34          move.l x, D1
00001052  C1C1                      35          muls D1, D0
00001054  4E75                      36          rts
00001056  4E75                      37          rts
00001058                            38  __end_cube_3:
00001058                            39          ; Inlined function from template: abs
00001058  6000 003C                 40          bra __end_abs_5
0000105C                            41  __abs_4:
0000105C  2239 0000119A             42          move.l x, D1
00001062  7400                      43          moveq #0, D2  ; Optimized small constant
00001064  7600                      44          moveq #0, D3  ; Clear result register
00001066  B282                      45          cmp.l D2, D1  ; Compare values
00001068  5DC3                      46          slt.b D3      ; Set dest to FF if less than, 00 otherwise
0000106A  C6BC 00000001             47          and.l #1, D3  ; Convert FF to 01, 00 stays 00
00001070  2003                      48          move.l D3, D0  ; Move condition result to D0
00001072  4A83                      49          tst.l D3  ; Check if condition is zero/false
00001074  6700 0014                 50          beq .else_6       ; Branch to else if condition is false
00001078  2239 0000119A             51          move.l x, D1
0000107E  2401                      52          move.l D1, D2
00001080  4482                      53          neg.l D2
00001082  2002                      54          move.l D2, D0  ; Set return value
00001084  4E75                      55          rts
00001086  6000 0002                 56          bra .endif_7        ; Skip over else section when then section completes
0000108A                            57  .else_6:             ; Else section starts here
0000108A                            58  .endif_7:             ; End of if-else statement
0000108A  2239 0000119A             59          move.l x, D1
00001090  2001                      60          move.l D1, D0  ; Set return value
00001092  4E75                      61          rts
00001094  4E75                      62          rts
00001096                            63  __end_abs_5:
00001096  7205                      64          moveq #5, D1  ; Optimized small constant
00001098  23C1 0000119E             65          move.l D1, num
0000109E  2239 0000119E             66          move.l num, D1
000010A4  2439 0000119E             67          move.l num, D2
000010AA  2202                      68          move.l D2, D1
000010AC  2F01                      69          move.l D1, -(SP)
000010AE  588F                      70          add.l #4, SP
000010B0  2600                      71          move.l D0, D3
000010B2  2F03                      72          move.l D3, -(SP)
000010B4  47F9 0000113F             73          lea strAB, A3  ; Load effective address
000010BA  2F0B                      74          move.l A3, -(SP)
000010BC  6100 00EC                 75          bsr print
000010C0  508F                      76          add.l #8, SP
000010C2  2239 0000119E             77          move.l num, D1
000010C8  2439 0000119E             78          move.l num, D2
000010CE  2202                      79          move.l D2, D1
000010D0  2F01                      80          move.l D1, -(SP)
000010D2  588F                      81          add.l #4, SP
000010D4  2600                      82          move.l D0, D3
000010D6  2F03                      83          move.l D3, -(SP)
000010D8  47F9 00001134             84          lea strAC, A3  ; Load effective address
000010DE  2F0B                      85          move.l A3, -(SP)
000010E0  6100 00C8                 86          bsr print
000010E4  508F                      87          add.l #8, SP
000010E6  72F6                      88          moveq #-10, D1  ; Optimized small constant
000010E8  74F6                      89          moveq #-10, D2  ; Optimized small constant
000010EA  2202                      90          move.l D2, D1
000010EC  2F01                      91          move.l D1, -(SP)
000010EE  588F                      92          add.l #4, SP
000010F0  2600                      93          move.l D0, D3
000010F2  2F03                      94          move.l D3, -(SP)
000010F4  47F9 0000114C             95          lea strAD, A3  ; Load effective address
000010FA  2F0B                      96          move.l A3, -(SP)
000010FC  6100 00AC                 97          bsr print
00001100  508F                      98          add.l #8, SP
00001102                            99          ; String mixin (compile-time code generation)
00001102                           100          ; String mixin content: int generated = 42;
00001102                           101          ; Generated code for mixin: int generated = 42;
00001102  23FC 0000002A 000011A2   102          move.l #42, generated
0000110C  2239 000011A2            103          move.l generated, D1
00001112  2F01                     104          move.l D1, -(SP)
00001114  45F9 00001158            105          lea strAE, A2  ; Load effective address
0000111A  2F0A                     106          move.l A2, -(SP)
0000111C  6100 008C                107          bsr print
00001120  508F                     108          add.l #8, SP
00001122  43F9 00001185            109          lea strAF, A1  ; Load effective address
00001128  2F09                     110          move.l A1, -(SP)
0000112A  6100 007E                111          bsr print
0000112E  588F                     112          add.l #4, SP
00001130                           113          ; Function epilogue
00001130  4E5E                     114          unlk A6       ; Restore stack frame (restores A6 and SP in one instruction)
00001132  4E75                     115          rts           ; Return from subroutine
00001134                           116  
00001134                           117  ; ===== DATA SECTION =====
00001134                           118  ; String literals
00001134                           119  strAC:
00001134= 43 75 62 65 20 6F ...    120          dc.b 'Cube of 5:', 0
0000113F                           121  strAB:
0000113F= 53 71 75 61 72 65 ...    122          dc.b 'Square of 5:', 0
0000114C                           123  strAD:
0000114C= 41 62 73 20 6F 66 ...    124          dc.b 'Abs of -10:', 0
00001158                           125  strAE:
00001158= 47 65 6E 65 72 61 ...    126          dc.b 'Generated value:', 0
00001169                           127  strAA:
00001169= 54 65 73 74 69 6E ...    128          dc.b 'Testing mixin functionality', 0
00001185                           129  strAF:
00001185= 4D 69 78 69 6E 20 ...    130          dc.b 'Mixin test completed', 0
0000119A                           131  ; Scalar and struct variables
0000119A                           132  x:    ds.l 1
0000119E                           133  num:    ds.l 1
000011A2                           134  generated:    ds.l 1
000011A6                           135  ; Array labels
000011A6                           136  ; Loop variables
000011A6                           137  
000011A6  FFFF FFFF                138          SIMHALT
000011AA                           139  
000011AA                           140  ; ===== RUNTIME FUNCTIONS =====
000011AA                           141  print:
000011AA                           142          ; Function prologue
000011AA  4E56 0000                143          link    A6, #0          ; Setup stack frame
000011AE  48E7 FFFC                144          movem.l D0-D7/A0-A5, -(SP) ; Save all registers
000011B2                           145  
000011B2                           146          ; Print the string part
000011B2  226E 0008                147          move.l  8(A6), A1       ; Get string address from first parameter
000011B6  700D                     148          move.l  #13, D0         ; Task 13 - print string without newline
000011B8  4E4F                     149          trap    #15             ; Call OS
000011BA                           150  
000011BA                           151          ; Print the value (second parameter)
000011BA  222E 000C                152          move.l  12(A6), D1      ; Get the value to print
000011BE  7003                     153          move.l  #3, D0          ; Task 3 - display number in D1.L
000011C0  4E4F                     154          trap    #15             ; Call OS
000011C2                           155  
000011C2                           156          ; Print a newline
000011C2  700B                     157          move.l  #11, D0         ; Task 11 - print CR/LF
000011C4  4E4F                     158          trap    #15             ; Call OS
000011C6                           159  
000011C6                           160          ; Function epilogue
000011C6  4CDF 3FFF                161          movem.l (SP)+, D0-D7/A0-A5 ; Restore all registers
000011CA  4E5E                     162          unlk    A6              ; Restore stack frame
000011CC  4E75                     163          rts                     ; Return from subroutine
Line 164 WARNING: Address expected
000011CE                           164          END

No errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
GENERATED           11A2
MAIN                100E
NUM                 119E
PRINT               11AA
STRAA               1169
STRAB               113F
STRAC               1134
STRAD               114C
STRAE               1158
STRAF               1185
X                   119A
__ABS_4             105C
__ABS_4:ELSE_6      108A
__ABS_4:ENDIF_7     108A
__CUBE_2            103C
__END_ABS_5         1096
__END_CUBE_3        1058
__END_SQUARE_1      1038
__GLOBAL_INIT       100C
__SQUARE_0          1024
